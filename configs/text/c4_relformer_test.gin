# Copyright 2021 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import trax.data
import trax.supervised.trainer_lib

# Macros:
# ==============================================================================
max_length = 3072
mean_noise_span_length = 3.0
noise_density = 0.15
vocab_size = 32000

# Parameters for TFDS data pipeline:
# ==============================================================================
make_inputs.train_stream = [
  @training/data.TFDS(),
  @data.CountAndSkip(),
  @data.SentencePieceTokenize(),
  @data.MLM(),
  @data.FilterEmptyExamples(),
  @data.TruncateToLength(),
  @data.AppendValue(),
  @data.ConcatenateToLMInput(),
  @data.Shuffle(),
  @data.Batch(),
]

make_inputs.eval_stream = [
  @validation/data.TFDS(),
  @data.SentencePieceTokenize(),
  @data.MLM(),
  @data.FilterEmptyExamples(),
  @data.TruncateToLength(),
  @data.AppendValue(),
  @data.ConcatenateToLMInput(),
  @validation/data.Batch(),
]

# Parameters for data.TFDS:
# ==============================================================================
# data.TFDS.dataset_name = 'c4/en:2.3.0'
data.TFDS.dataset_name = 'tiny_shakespeare'
data.TFDS.keys = ('text',)
data.TFDS.shuffle_train = False
training/data.TFDS.train = True
validation/data.TFDS.train = False

# Parameters for data.MLM:
# ==============================================================================
data.MLM.vocab_size = %vocab_size
data.MLM.max_length = %max_length
data.MLM.noise_density = %noise_density
data.MLM.mean_noise_span_length = %mean_noise_span_length

# Parameters for data.AppendValue:
# ==============================================================================
data.AppendValue.val = {0:[0], 1:[1]}

# Parameters for data.CountAndSkip
# ==============================================================================
data.CountAndSkip.name = 'c4'

# Parameters for data.PadToLength:
# ==============================================================================
data.ConcatenateToLMInput.pad_to_length = 4096
data.TruncateToLength.len_map = {0: (3072, ), 1: (1024, )}

# Parameters for data.Batch:
# ==============================================================================
data.Batch.batch_size = 8  # On one 2x2, 8 chips, batch_size 4 per chip for 32.
validation/data.Batch.batch_size = 8

# Parameters for train:
# ==============================================================================
train.eval_steps = 10
train.model = @trax.models.RelformerLM
train.steps = 1000000
train.optimizer = @trax.optimizers.Adafactor
train.checkpoint_highest = 'neg_log_perplexity'
train.checkpoint_lowest = 'loss'
# train.use_memory_efficient_trainer = True
train.inputs = @data.make_inputs
train.checkpoints_at = []

# Parameters for Adafactor:
# ==============================================================================
Adafactor.weight_decay_rate = 0.0
Adafactor.beta1 = 0.0
Adafactor.decay_rate = 0.8
Adafactor.clipping_threshold = 1.0
Adafactor.epsilon1 = 1e-16
Adafactor.epsilon2 = 0.001
Adafactor.factored = True
Adafactor.multiply_by_parameter_scale = True

# Parameters for RelformerLM:
# ==============================================================================
RelformerLM.vocab_size=%vocab_size # Includes pad token and unused EOS token
RelformerLM.d_model = 768
RelformerLM.d_ff = 3072
RelformerLM.vanilla_layers = (1, 1)
RelformerLM.shorten_factor = 4
RelformerLM.n_rel_layers = 1
RelformerLM.rel_chunk_len = 512
RelformerLM.vanilla_chunk_len = 512
RelformerLM.n_heads = 8
RelformerLM.dropout = 0.0
RelformerLM.max_len = 16384
