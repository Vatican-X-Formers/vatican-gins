# Copyright 2020 The Trax Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import trax.layers
import trax.models
import trax.optimizers
import trax.data.inputs
import trax.data.tf_inputs
import trax.supervised.trainer_lib

# Parameters that will vary between experiments:
# ==============================================================================
attn_type = [
    @trax.layers.SelfAttention,
    @trax.layers.SelfAttention,
    @LSHSelfAttention,
    @trax.layers.SelfAttention,
]
attn_kv = 64  # Use 128 if more memory is available
n_layers = 12
dropout = 0.2

# trax.layers.SelfAttention: attend to nearby items
# Specifying chunk_len restricts an item to attend within its own chunk, as well
# as the previous `n_chunks_before` chunks.
trax.layers.SelfAttention.chunk_len = 128
trax.layers.SelfAttention.n_chunks_before = 1

# LSHSelfAttention: locality-sensitive hashing (LSH) attention
LSHSelfAttention.chunk_len = 256
LSHSelfAttention.n_buckets = 512
LSHSelfAttention.n_chunks_before = 1
LSHSelfAttention.n_hashes = 2

max_len = 768
eval_max_len = 768

train/data.Batch.batch_size = 16
eval/data.Batch.batch_size = 32
data.generate_sequential_chunks.max_length = 512
data.PadToLength.pad_value = {0: 0, 1: 0}

make_inputs.train_stream = [
    @train/data.TFDS(),
  @data.detuplify(),
    @train/data.generate_sequential_chunks(),
  @data.Shuffle(),
  @data.ConcatenateToLMInput(),
    @train/data.PadToLength(),
  @data.AddLossWeights(),
    @train/data.Batch()
]

make_inputs.eval_stream = [
    @eval/data.TFDS(),
  @data.detuplify(),
    @eval/data.generate_sequential_chunks(),
  @data.ConcatenateToLMInput(),
    @eval/data.PadToLength(),
  @data.AddLossWeights(),
    @eval/data.Batch()
]

data.TFDS.dataset_name = 't2t_enwik8_l65k'
data.TFDS.keys = ['targets']
train/data.TFDS.train = True
eval/data.TFDS.train = False

train/data.generate_sequential_chunks.max_length = %max_len
train/data.PadToLength.len_map = {0: %max_len , 1: %max_len}

eval/data.generate_sequential_chunks.max_length = %eval_max_len
eval/data.PadToLength.len_map = {0: %eval_max_len , 1: %eval_max_len}

# Parameters for multifactor:
# ==============================================================================
# 0.03125 ~= 1024^-0.5 = d_model^-0.5
multifactor.constant = 0.03125
multifactor.factors = 'constant * linear_warmup * rsqrt_decay'
multifactor.warmup_steps = 2000

# Parameters for Adam:
# ==============================================================================
Adam.weight_decay_rate=0.0
Adam.b1 = 0.9
Adam.b2 = 0.98
Adam.eps = 1e-9

# Parameters for train:
# ==============================================================================
train.inputs = @data.inputs.make_inputs
train.eval_frequency = 500
train.eval_steps = 8
train.model = @trax.models.ReformerLM
train.optimizer = @trax.optimizers.Adam
train.steps = 100000
train.save_graphs = False
train.checkpoints_at = \
    [1000, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000,
     55000, 60000, 70000, 80000, 90000, 100000]

# Parameters for trax.layers.SelfAttention:
# ==============================================================================
trax.layers.SelfAttention.attention_dropout = 0.2
# trax.layers.SelfAttention.chunk_len: see top
trax.layers.SelfAttention.n_chunks_after = 0
# trax.layers.SelfAttention.n_chunks_before: see top
trax.layers.SelfAttention.n_parallel_heads = 1

# Parameters for LSHSelfAttention:
# ==============================================================================
LSHSelfAttention.attention_dropout = 0.2
# LSHSelfAttention.chunk_len: see top
# LSHSelfAttention.n_buckets: see top
LSHSelfAttention.n_chunks_after = 0
# LSHSelfAttention.n_chunks_before: see top
# LSHSelfAttention.n_hashes: see top
LSHSelfAttention.n_parallel_heads = 1
LSHSelfAttention.predict_drop_len = 256
LSHSelfAttention.predict_mem_len = 16384

# Parameters for ReformerLM:
# ==============================================================================
ReformerLM.attention_type = %attn_type
ReformerLM.d_attention_key = %attn_kv
ReformerLM.d_attention_value = %attn_kv
ReformerLM.d_model = 768  # Use 1024 if more memory is available
ReformerLM.d_ff = 2048  # Use 4096 if more memory is available
ReformerLM.dropout = %dropout
ReformerLM.ff_activation = @trax.layers.Relu
ReformerLM.max_len = %max_len
ReformerLM.mode = 'train'
ReformerLM.n_heads = 8
ReformerLM.n_layers = %n_layers
ReformerLM.vocab_size = 258  # Includes pad token and unused EOS token
